diff --git a/kernel/tmp b/kernel/tmp
index 8baa310..e69de29 100644
--- a/kernel/tmp
+++ b/kernel/tmp
@@ -1,466 +0,0 @@
-commit 1e00c4c23bcc25259f07584376820bd2192e5862
-Author: s54zhang <s54zhang@student.cs.uwaterloo.ca>
-Date:   Sun Jul 1 22:30:08 2012 -0400
-
-    rename stuff to not use ui msg.
-
-diff --git a/kernel/train/Driver.c b/kernel/train/Driver.c
-index 04e280c..2b2d3c8 100644
---- a/kernel/train/Driver.c
-+++ b/kernel/train/Driver.c
-@@ -14,17 +14,16 @@
- // TODO, smaller Delay increments. and make better guess.
- 
- static int com1;
--static int com2;
- static int ui;
- static int CC = 0;
- 
- static int getStoppingDistance(Driver* me) {
--  return me->d[(int)me->uiMsg.speed][(int)me->uiMsg.speedDir][MAX_VAL];
-+  return me->d[(int)me->speed][(int)me->speedDir][MAX_VAL];
- }
- 
- // mm/s
- static int getVelocity(Driver* me){
--  return me->v[(int)me->uiMsg.speed][(int)me->uiMsg.speedDir];
-+  return me->v[(int)me->speed][(int)me->speedDir];
- }
- 
- static int getStoppingTime(Driver* me) {
-@@ -38,12 +37,12 @@ static void getRoute(Driver* me, DriverMsg* msg) {
-   // TODO use me->currPos
-   Position currPos;
-   currPos.landmark1.type = LANDMARK_SENSOR;
--  currPos.landmark1.num1 = me->uiMsg.lastSensorBox;
--  currPos.landmark1.num2 = me->uiMsg.lastSensorVal;
-+  currPos.landmark1.num1 = me->lastSensorBox;
-+  currPos.landmark1.num2 = me->lastSensorVal;
-   currPos.landmark2.type = LANDMARK_SENSOR;
--  currPos.landmark2.num1 = me->uiMsg.nextSensorBox;
--  currPos.landmark2.num2 = me->uiMsg.nextSensorVal;
--  currPos.offset = me->uiMsg.distanceFromLastSensor;
-+  currPos.landmark2.num1 = me->nextSensorBox;
-+  currPos.landmark2.num2 = me->nextSensorVal;
-+  currPos.offset = me->distanceFromLastSensor;
- 
-   trackmsg.position1 = currPos;
-   trackmsg.position2 = msg->pos;
-@@ -70,12 +69,12 @@ static void getRoute(Driver* me, DriverMsg* msg) {
- 
- static int shouldStopNow(Driver* me) {
-   int canUseLastSensor =
--      ( me->uiMsg.lastSensorBox == me->stopSensorBox &&
--        me->uiMsg.lastSensorVal == me->stopSensorVal
-+      ( me->lastSensorBox == me->stopSensorBox &&
-+        me->lastSensorVal == me->stopSensorVal
-       ) || me->useLastSensorNow;
- 
-   if (canUseLastSensor) {
--    int d = me->distancePassStopSensorToStop - me->uiMsg.distanceFromLastSensor;
-+    int d = me->distancePassStopSensorToStop - me->distanceFromLastSensor;
- 
-     if ((CC++ & 15) == 0) {
-       PrintDebug(me->ui, "Navi Nagger. %d", d);
-@@ -114,7 +113,7 @@ static void updateStopNode(Driver* me, int speed) {
-   PrintDebug(me->ui, "calc stopping distance.");
- 
-   const int stoppingDistance =
--      me->d[speed][(int)me->uiMsg.speedDir][MAX_VAL];
-+      me->d[speed][(int)me->speedDir][MAX_VAL];
-   int stop = stoppingDistance;
-   // Find the stopping distance for the stopNode.
-   // S------L------L---|-----L---------R------F
-@@ -149,7 +148,7 @@ static void updateStopNode(Driver* me, int speed) {
-         //          |  |___ current position
-         //          |______ distanceFromLastSensor
-         me->useLastSensorNow = 1;
--        previousStop += me->uiMsg.distanceFromLastSensor;
-+        previousStop += me->distanceFromLastSensor;
-       }
-       // Else..
-       //     |---stopSensorBox
-@@ -190,14 +189,14 @@ static void updateRoute(Driver* me, char box, char val) {
- }
- 
- static void dynamicCalibration(Driver* me) {
--  if (me->uiMsg.lastSensorUnexpected) return;
--  if (me->uiMsg.speed == 0) return; // Cannot calibrate speed zero
-+  if (me->lastSensorUnexpected) return;
-+  if (me->speed == 0) return; // Cannot calibrate speed zero
- 
--  int dTime = me->uiMsg.lastSensorPredictedTime - me->uiMsg.lastSensorActualTime;
-+  int dTime = me->lastSensorPredictedTime - me->lastSensorActualTime;
-   if (dTime > 1000) return;
--  int velocity = me->calibrationDistance * 100 * 1000 / (me->uiMsg.lastSensorActualTime - me->calibrationStart);
--  int originalVelocity = me->v[(int)me->uiMsg.speed][(int)me->uiMsg.speedDir];
--  me->v[(int)me->uiMsg.speed][(int)me->uiMsg.speedDir]
-+  int velocity = me->calibrationDistance * 100 * 1000 / (me->lastSensorActualTime - me->calibrationStart);
-+  int originalVelocity = me->v[(int)me->speed][(int)me->speedDir];
-+  me->v[(int)me->speed][(int)me->speedDir]
-       = (originalVelocity * 8 + velocity * 2) / 10;
- }
- 
-@@ -219,18 +218,18 @@ static void trainSetSpeed(const int speed, const int stopTime, const int delayer
-       msg[0] = (char)speed;
-       Putstr(com1, msg, 2);
-     }
--    if (speed > me->uiMsg.speed) {
--      me->uiMsg.speedDir = ACCELERATE;
--    } else if (speed < me->uiMsg.speed) {
--      me->uiMsg.speedDir = DECELERATE;
-+    if (speed > me->speed) {
-+      me->speedDir = ACCELERATE;
-+    } else if (speed < me->speed) {
-+      me->speedDir = DECELERATE;
-     }
--    me->uiMsg.speed = speed;
-+    me->speed = speed;
-   } else {
--    PrintDebug(me->ui, "Reverse... %d \n", me->uiMsg.speed);
-+    PrintDebug(me->ui, "Reverse... %d \n", me->speed);
-     DriverMsg delayMsg;
-     delayMsg.type = SET_SPEED;
-     delayMsg.timestamp = stopTime;
--    delayMsg.data2 = (signed char)me->uiMsg.speed;
-+    delayMsg.data2 = (signed char)me->speed;
-     PrintDebug(me->ui, "Using delayer: %d for %d \n", me->delayer, stopTime);
- 
-     Reply(me->delayer, (char*)&delayMsg, sizeof(DriverMsg));
-@@ -239,8 +238,8 @@ static void trainSetSpeed(const int speed, const int stopTime, const int delayer
-     msg[1] = (char)me->trainNum;
- 
-     Putstr(com1, msg, 2);
--    me->uiMsg.speed = 0;
--    me->uiMsg.speedDir = DECELERATE;
-+    me->speed = 0;
-+    me->speedDir = DECELERATE;
-   }
- }
- 
-@@ -293,29 +292,16 @@ static void trainDelayer() {
-   }
- }
- 
--static void trainUiNagger() {
-+static void trainNagger() {
-   char timename[] = TIMESERVER_NAME;
-   int timeserver = WhoIs(timename);
-   int parent = MyParentsTid();
- 
-   DriverMsg msg;
--  msg.type = UI_NAGGER;
--  for (;;) {
--    Delay(20, timeserver); // .2 seconds
--    msg.timestamp = Time(timeserver) * 10;
--    Send(parent, (char*)&msg, sizeof(DriverMsg), (char*)1, 0);
--  }
--}
--
--static void trainNavigateNagger() {
--  char timename[] = TIMESERVER_NAME;
--  int timeserver = WhoIs(timename);
--  int parent = MyParentsTid();
--
--  DriverMsg msg;
--  msg.type = NAVIGATE_NAGGER;
-+  msg.type = NAGGER;
-   for (;;) {
-     Delay(5, timeserver); // .15 seconds
-+    msg.timestamp = Time(timeserver);
-     Send(parent, (char*)&msg, sizeof(DriverMsg), (char*)1, 0);
-   }
- }
-@@ -326,49 +312,53 @@ static void initDriver(Driver* me) {
-   ui = me->ui;
-   char trackName[] = TRACK_NAME;
-   me->trackManager = WhoIs(trackName);
-+  char timename[] = TIMESERVER_NAME;
-+  me->timeserver = WhoIs(timename);
-+
-   me->route.length = 0;
-   me->stopCommited = 0; // haven't enabled speed zero yet.
-   me->useLastSensorNow = 0;
- 
--  char timename[] = TIMESERVER_NAME;
--  me->timeserver = WhoIs(timename);
- 
-   DriverInitMsg init;
-   int controller;
-   Receive(&controller, (char*)&init, sizeof(DriverInitMsg));
-   Reply(controller, (char*)1, 0);
-   me->trainNum = init.trainNum;
--  me->uiMsg.nth = init.nth;
-+  me->uiNth = init.nth;
- 
--  me->uiMsg.speed = 0;
--  me->uiMsg.speedDir = ACCELERATE;
--  me->uiMsg.distanceToNextSensor = 0;
--  me->uiMsg.distanceFromLastSensor = 0;
--  me->uiMsg.lastSensorActualTime = 0;
-+  me->speed = 0;
-+  me->speedDir = ACCELERATE;
-+  me->distanceToNextSensor = 0;
-+  me->distanceFromLastSensor = 0;
-+  me->lastSensorActualTime = 0;
- 
-   me->delayer = Create(1, trainDelayer);
--  me->uiNagger = Create(3, trainUiNagger);
-   me->sensorWatcher = Create(3, trainSensor);
--  me->navigateNagger = Create(2, trainNavigateNagger);
-+  me->nagger = Create(2, trainNagger);
-   me->routeRemaining = -1;
- 
--  me->uiMsg.type = UPDATE_TRAIN;
--
-   initStoppingDistance((int*)me->d);
-   initVelocity((int*)me->v);
-+  trainSetSpeed(0, 0, 0, me); // Make train speed zero.
- }
- 
--static void sendUiReport(Driver* me, int time) {
--  me->uiMsg.velocity = getVelocity(me) / 100;
-+static void updatePosition(Driver* me, int time) {
-   if (time) {
-     // In mm
-     int dPosition = (time - me->reportTime) * getVelocity(me) / 100000;
-     me->reportTime = time;
--    me->uiMsg.distanceFromLastSensor += dPosition;
--    me->uiMsg.distanceToNextSensor -= dPosition;
-+    me->distanceFromLastSensor += dPosition;
-+    me->distanceToNextSensor -= dPosition;
-   }
-+}
-+
-+static void sendUiReport(Driver* me) {
-+  TrainUiMsg msg;
-+  msg.type = UPDATE_TRAIN;
-+  msg.nth = me->uiNth;
- 
--  Send(me->ui, (char*)&(me->uiMsg), sizeof(TrainUiMsg), (char*)1, 0);
-+  Send(me->ui, (char*)&msg, sizeof(TrainUiMsg), (char*)1, 0);
- }
- 
- static void driver() {
-@@ -377,6 +367,7 @@ static void driver() {
- 
-   // used to store one set_route msg when train's current position is unknown
-   int hasTempRouteMsg = 0;
-+  int naggCount = 0;
-   DriverMsg tempRouteMsg;
- 
-   for (;;) {
-@@ -393,7 +384,7 @@ static void driver() {
- 
-     switch (msg.type) {
-       case GET_SPEED: {
--        Reply(replyTid, (char*)&me.uiMsg.speed, 4);
-+        Reply(replyTid, (char*)&me.speed, 4);
-         break;
-       }
-       case SET_SPEED: {
-@@ -402,9 +393,9 @@ static void driver() {
-                       (msg.data3 == DELAYER),
-                       &me);
-         if (msg.data3 != DELAYER) {
--          //printff(com2, "Replied to %d\n", replyTid);
-+          //PrintDebug(me.ui, "Replied to %d\n", replyTid);
-           Reply(replyTid, (char*)1, 0);
--          sendUiReport(&me, 0); // Don't update time
-+          sendUiReport(&me);
-           break;
-         } else if (me.route.length != 1) {
-           // Delayer came back. Reverse command completed
-@@ -420,43 +411,41 @@ static void driver() {
-         PrintDebug(me.ui, "delayer come back.");
-         break;
-       }
--      case UI_NAGGER: {
--        sendUiReport(&me, msg.timestamp);
--        break;
--      }
-       case SENSOR_TRIGGER: {
--        if (msg.data2 != me.uiMsg.nextSensorBox || msg.data3 != me.uiMsg.nextSensorVal) {
--          me.uiMsg.lastSensorUnexpected = 1;
-+        if (msg.data2 != me.nextSensorBox || msg.data3 != me.nextSensorVal) {
-+          me.lastSensorUnexpected = 1;
-           //reRoute(&me, msg.data2, msg.data3); // TODO
-         } else {
--          me.uiMsg.lastSensorUnexpected = 0;
-+          me.lastSensorUnexpected = 0;
-         }
-         updateRoute(&me, msg.data2, msg.data3);
--        me.uiMsg.lastSensorBox = msg.data2; // Box
--        me.uiMsg.lastSensorVal = msg.data3; // Val
--        me.uiMsg.lastSensorActualTime = msg.timestamp;
-+
-+        me.lastSensorBox = msg.data2; // Box
-+        me.lastSensorVal = msg.data3; // Val
-+        me.lastSensorActualTime = msg.timestamp;
-         dynamicCalibration(&me);
--        me.uiMsg.lastSensorPredictedTime = me.uiMsg.nextSensorPredictedTime;
-+        me.lastSensorPredictedTime = me.nextSensorPredictedTime;
- 
-         TrackNextSensorMsg tMsg;
-         TrackMsg qMsg;
-         qMsg.type = QUERY_NEXT_SENSOR_FROM_SENSOR;
-         qMsg.landmark1.type = LANDMARK_SENSOR;
--        qMsg.landmark1.num1 = me.uiMsg.lastSensorBox;
--        qMsg.landmark1.num2 = me.uiMsg.lastSensorVal;
-+        qMsg.landmark1.num1 = me.lastSensorBox;
-+        qMsg.landmark1.num2 = me.lastSensorVal;
-         Send(me.trackManager, (char*)&qMsg, sizeof(TrackMsg),
-               (char*)&tMsg, sizeof(TrackNextSensorMsg));
-         me.calibrationStart = msg.timestamp;
-         me.calibrationDistance = tMsg.dist;
--        me.uiMsg.distanceFromLastSensor = 0;
--        me.uiMsg.distanceToNextSensor = tMsg.dist;
-+        me.distanceFromLastSensor = 0;
-+        me.distanceToNextSensor = tMsg.dist;
-         me.reportTime = msg.timestamp;
--        me.uiMsg.nextSensorBox = tMsg.sensor.num1;
--        me.uiMsg.nextSensorVal = tMsg.sensor.num2;
--        me.uiMsg.nextSensorPredictedTime =
--          msg.timestamp + me.uiMsg.distanceToNextSensor*100000 / getVelocity(&me) - 50; // 50 ms delay for sensor query.
-+        me.nextSensorBox = tMsg.sensor.num1;
-+        me.nextSensorVal = tMsg.sensor.num2;
-+        me.nextSensorPredictedTime =
-+          msg.timestamp + me.distanceToNextSensor*100000 / getVelocity(&me) - 50; // 50 ms delay for sensor query.
- 
--        sendUiReport(&me, msg.timestamp);
-+        updatePosition(&me, msg.timestamp);
-+        sendUiReport(&me);
-         if (hasTempRouteMsg) {
-           getRoute(&me, &tempRouteMsg);
-           updateStopNode(&me, tempRouteMsg.data2);
-@@ -464,32 +453,37 @@ static void driver() {
-         }
-         break;
-       }
--      case NAVIGATE_NAGGER: {
--        if (me.routeRemaining == -1) break;
--
--        if (!me.stopCommited) {
--          if (shouldStopNow(&me)) {
--            if (me.route.nodes[me.stopNode].num == REVERSE) {
--              PrintDebug(me.ui, "Navi reversing.");
--              const int speed = -1;
--              trainSetSpeed(speed, getStoppingTime(&me), 0, &me);
-+      case NAGGER: {
-+        updatePosition(&me, msg.timestamp);
-+
-+        if (me.routeRemaining != -1) {
-+          if (!me.stopCommited) {
-+            if (shouldStopNow(&me)) {
-+              if (me.route.nodes[me.stopNode].num == REVERSE) {
-+                PrintDebug(me.ui, "Navi reversing.");
-+                const int speed = -1;
-+                trainSetSpeed(speed, getStoppingTime(&me), 0, &me);
-+              }
-+              else {
-+                PrintDebug(me.ui, "Navi Nagger stopping.");
-+                const int speed = 0;  // Set speed zero.
-+                trainSetSpeed(speed, getStoppingTime(&me), 0, &me);
-+                me.route.length = 0; // Finished the route.
-+              }
-+              me.stopCommited = 1;
-+              me.useLastSensorNow = 0;
-             }
--            else {
--              PrintDebug(me.ui, "Navi Nagger stopping.");
--              const int speed = 0;  // Set speed zero.
--              trainSetSpeed(speed, getStoppingTime(&me), 0, &me);
--              me.route.length = 0; // Finished the route.
--            }
--            me.stopCommited = 1;
--            me.useLastSensorNow = 0;
-           }
-         }
-+        if ((naggCount++ & 3) == 0) {
-+          sendUiReport(&me); // Update ui once in a while
-+        }
-         break;
-       }
-       case SET_ROUTE: {
-         Reply(replyTid, (char*)1, 0);
-         me.stopCommited = 0;
--        if (me.uiMsg.lastSensorActualTime > 0) {
-+        if (me.lastSensorActualTime > 0) {
-           getRoute(&me, &msg);
-           updateStopNode(&me, msg.data2);
-           trainSetSpeed(msg.data2, 0, 0, &me);
-@@ -514,9 +508,7 @@ static void trainController() {
-   RegisterAs(trainName);
- 
-   char com1Name[] = IOSERVERCOM1_NAME;
--  char com2Name[] = IOSERVERCOM2_NAME;
-   com1 = WhoIs(com1Name);
--  com2 = WhoIs(com2Name);
- 
-   int nth = 0;
-   int trainTid[80]; // Train num -> train tid
-diff --git a/kernel/train/Driver.h b/kernel/train/Driver.h
-index f2ecef9..6ac3fbb 100644
---- a/kernel/train/Driver.h
-+++ b/kernel/train/Driver.h
-@@ -11,11 +11,10 @@
- #define SET_SPEED  0
- #define GET_SPEED  1
- #define GOTO_DEST  2
--#define UI_NAGGER  3
-+#define NAGGER  3
- #define DELAYER    4
- #define SENSOR_TRIGGER 5
- #define SET_ROUTE  6
--#define NAVIGATE_NAGGER 7
- 
- typedef struct DriverInitMsg {
-   int nth;
-@@ -36,11 +35,10 @@ typedef struct DriverMsg {
- typedef struct Driver {
-   int trainNum;
-   int delayer;
--  int uiNagger;   // Tasks that reminds train to print
-   int ui;        // Ui Tid
-   int sensorWatcher;
-   int trackManager;
--  int navigateNagger;
-+  int nagger;
-   int timeserver;
-   int reportTime;
-   int calibrationStart;
-@@ -53,15 +51,33 @@ typedef struct Driver {
-   int distancePassStopSensorToStop;
-   int useLastSensorNow;
- 
--  TrainUiMsg uiMsg;
-+  //TrainUiMsg uiMsg;
-   Poly decel;
-   Route route;
- 
-   // TODO, non-ui stuff should use this instead of things instead of things in uiMsg
-+  char lastSensorUnexpected;
-+  char lastSensorBox;
-+  char lastSensorVal;
-+  int lastSensorActualTime;
-+  int lastSensorPredictedTime;
-+
-+  int speed;      // 0 - 14
-+  int speedDir;
-+  int distanceFromLastSensor;
-+  int distanceToNextSensor;
-+
-+  char nextSensorBox;
-+  char nextSensorVal;
-+  int nextSensorPredictedTime;
-+
-   Position currPos;
- 
-   int v[15][2];
-   int d[15][2][2];
-+
-+  // UI stuff
-+  char uiNth;
- } Driver;
- 
- int startDriverControllerTask();
diff --git a/kernel/train/Driver.h b/kernel/train/Driver.h
index 8bbf86a..d841907 100644
--- a/kernel/train/Driver.h
+++ b/kernel/train/Driver.h
@@ -3,6 +3,7 @@
 
 #include <Poly.h>
 #include <DriverController.h>
+#if 0
 
 typedef struct Driver {
   int trainNum;
@@ -85,4 +86,5 @@ typedef struct Driver {
 } Driver;
 
 
+#endif
 #endif // TRAIN_H_
diff --git a/kernel/train/DriverHelper.c b/kernel/train/DriverHelper.c
index 549ba53..817ee58 100644
--- a/kernel/train/DriverHelper.c
+++ b/kernel/train/DriverHelper.c
@@ -1,4 +1,4 @@
-static void toPosition(Driver* me, Position* pos) {
+static void toPosition(MultiTrainDriver* me, Position* pos) {
   pos->landmark1.type = me->lastSensorIsTerminal ? LANDMARK_END : LANDMARK_SENSOR;
   pos->landmark1.num1 = me->lastSensorBox;
   pos->landmark1.num2 = me->lastSensorVal;
@@ -8,7 +8,7 @@ static void toPosition(Driver* me, Position* pos) {
   pos->offset = (int)me->distanceFromLastSensor;
 }
 
-static void trySetSwitch_and_getNextSwitch(Driver* me) {
+static void trySetSwitch_and_getNextSwitch(MultiTrainDriver* me) {
   TrackMsg setSwitch;
   setSwitch.type = SET_SWITCH;
   setSwitch.trainNum = me->trainNum;
@@ -41,7 +41,7 @@ static void trySetSwitch_and_getNextSwitch(Driver* me) {
   }
 }
 
-static int reserveMoreTrack(Driver* me, int stationary, int stoppingDistance) {
+static int reserveMoreTrack(MultiTrainDriver* me, int stationary, int stoppingDistance) {
   // Note on passing in stopping distance:
   // if a trainSetSpeed command follows immediately after reserveMoretrack then
   // pass in the stoppingDistance of the newSpeed, else use getStoppingDistance(me)
@@ -86,7 +86,7 @@ static int reserveMoreTrack(Driver* me, int stationary, int stoppingDistance) {
   return RESERVE_SUCESS;
 }
 
-static void updatePrediction(Driver* me) {
+static void updatePrediction(MultiTrainDriver* me) {
   int now = Time(me->timeserver) * 10;
   TrackNextSensorMsg trackMsg;
   TrackMsg qMsg;
@@ -125,7 +125,7 @@ static void updatePrediction(Driver* me) {
   sendUiReport(me);
 }
 
-static void getRoute(Driver* me, Position* from, DriverMsg* msg) {
+static void getRoute(MultiTrainDriver* me, Position* from, DriverMsg* msg) {
   TrainDebug(me, "%d Getting Route.", me->trainNum);
   TrackMsg trackmsg;
   if (me->testMode) {
@@ -157,7 +157,7 @@ static void getRoute(Driver* me, Position* from, DriverMsg* msg) {
   }
 }
 
-static int shouldStopNow(Driver* me) {
+static int shouldStopNow(MultiTrainDriver* me) {
   if (me->stopNow) {
     return 2; // no room to stop, must stop now
   }
@@ -192,7 +192,7 @@ static int shouldStopNow(Driver* me) {
   return 0;
 }
 
-static void updateStopNode(Driver* me) {
+static void updateStopNode(MultiTrainDriver* me) {
   // Find the first reverse on the path, stop if possible.
   me->stopNode = me->route.length-1;
   const int stoppingDistance =
@@ -280,7 +280,7 @@ static void updateStopNode(Driver* me) {
 }
 
 // Update route traveled as sensors are hit.
-static void updateRoute(Driver* me, char box, char val) {
+static void updateRoute(MultiTrainDriver* me, char box, char val) {
   if (me->routeRemaining == -1) return;
 
   // See if we triggered a sensor on the route.
@@ -298,7 +298,7 @@ static void updateRoute(Driver* me, char box, char val) {
   // TODO if stoppped, update next stopNode.
 }
 
-static void updateSetSwitch(Driver* me) {
+static void updateSetSwitch(MultiTrainDriver* me) {
   for (int i = me->routeRemaining; i < me->stopNode; i++) {
     if (me->route.nodes[i].landmark.type == LANDMARK_SWITCH &&
         me->route.nodes[i].landmark.num1 == BR && me->nextSetSwitchNode == -1) {
@@ -309,7 +309,7 @@ static void updateSetSwitch(Driver* me) {
     }
   }
 }
-static void QueryNextSensor(Driver* me, TrackNextSensorMsg* trackMsg) {
+static void QueryNextSensor(MultiTrainDriver* me, TrackNextSensorMsg* trackMsg) {
   TrackMsg qMsg;
   qMsg.type = QUERY_NEXT_SENSOR_FROM_SENSOR;
   qMsg.landmark1.type = LANDMARK_SENSOR;
@@ -319,7 +319,7 @@ static void QueryNextSensor(Driver* me, TrackNextSensorMsg* trackMsg) {
       (char*)trackMsg, sizeof(TrackNextSensorMsg));
 }
 
-static int QueryIsSensorReserved(Driver* me, int box, int val) {
+static int QueryIsSensorReserved(MultiTrainDriver* me, int box, int val) {
   char isReserved = 0;
   TrackMsg qMsg;
   qMsg.type = QUERY_SENSOR_RESERVED;
@@ -332,7 +332,7 @@ static int QueryIsSensorReserved(Driver* me, int box, int val) {
   return (int)isReserved;
 }
 
-static void printLandmark(Driver* me, TrackLandmark* l) {
+static void printLandmark(MultiTrainDriver* me, TrackLandmark* l) {
   if (l->type == LANDMARK_SENSOR) {
     TrainDebug(me, "Landmark Sn  %c%d",
         'A' +l->num1, l->num2);
@@ -382,7 +382,8 @@ static void trainSensor() {
     Send(parent, (char*)&msg, sizeof(DriverMsg), (char*)1, 0);
   }
 }
-static void printRoute(Driver* me) {
+
+static void printRoute(MultiTrainDriver* me) {
   TrainDebug(me, "Route Distance %d", me->route.dist);
 
   TrainDebug(me, "<Route>");
@@ -414,7 +415,7 @@ static void printRoute(Driver* me) {
 
 }
 
-static void setRoute(Driver* me, Position* from, DriverMsg* msg) {
+static void setRoute(MultiTrainDriver* me, Position* from, DriverMsg* msg) {
   //TrainDebug(me, "Route setting!");
   me->stopCommited = 0;
 
diff --git a/kernel/train/MultiTrainDriver.c b/kernel/train/MultiTrainDriver.c
index 212dd6e..e2aa956 100644
--- a/kernel/train/MultiTrainDriver.c
+++ b/kernel/train/MultiTrainDriver.c
@@ -12,46 +12,46 @@
 #include <DumbDriver.h>
 #include <Lock.h>
 
-static void getRoute(Driver* me, Position* from, DriverMsg* msg);
-static void printLandmark(Driver* me, TrackLandmark* l);
+static void getRoute(MultiTrainDriver* me, Position* from, DriverMsg* msg);
+static void printLandmark(MultiTrainDriver* me, TrackLandmark* l);
 static void trainDelayer();
 static void trainStopDelayer();
 static void trainSensor();
 static void trainNavigateNagger();
-static void printRoute(Driver* me);
-static void QueryNextSensor(Driver* me, TrackNextSensorMsg* trackMsg);
-static int QueryIsSensorReserved(Driver* me, int box, int val);
-static void setRoute(Driver* me, Position* from, DriverMsg* msg);
-static void updatePrediction(Driver* me);
-static int reserveMoreTrack(Driver* me, int stopped, int stoppingDistance);
+static void printRoute(MultiTrainDriver* me);
+static void QueryNextSensor(MultiTrainDriver* me, TrackNextSensorMsg* trackMsg);
+static int QueryIsSensorReserved(MultiTrainDriver* me, int box, int val);
+static void setRoute(MultiTrainDriver* me, Position* from, DriverMsg* msg);
+static void updatePrediction(MultiTrainDriver* me);
+static int reserveMoreTrack(MultiTrainDriver* me, int stopped, int stoppingDistance);
 static void multiTrainDriverCourier();
 
-static void reroute(Driver* me) {
+static void reroute(MultiTrainDriver* me) {
   //TODO
 }
 
-static void sendUiReport(Driver* me) {
+static void sendUiReport(MultiTrainDriver* me) {
 }
 
-static int getStoppingDistance(Driver* me) {
+static int getStoppingDistance(MultiTrainDriver* me) {
   return 440; // TODO
 }
 
-static int interpolateStoppingDistance(Driver* me, int velocity) {
+static int interpolateStoppingDistance(MultiTrainDriver* me, int velocity) {
   return 440; // TODO
 }
 
-static int getVelocity(Driver* me) {
+static int getVelocity(MultiTrainDriver* me) {
   return 56000; // TODO
 }
 
-static void trainSetSpeed(const int speed, const int stopTime, const int delayer, Driver* me) {
+static void trainSetSpeed(const int speed, const int stopTime, const int delayer, MultiTrainDriver* me) {
 }
 
 
 static int makeReservation(MultiTrainDriver* me) {
   if (me->tailMode) {
-    PrintDebug(me->driver.ui, "Cannot make reservation in tail mode");
+    PrintDebug(me->ui, "Cannot make reservation in tail mode");
     return 0;
   }
   int isStationary = me->stoppedCount == me->numTrainInGroup;
@@ -76,8 +76,8 @@ static int makeReservation(MultiTrainDriver* me) {
 
   ReleaseOldAndReserveNewTrackMsg qMsg;
   qMsg.type = RELEASE_OLD_N_RESERVE_NEW;
-  qMsg.trainNum = me->driver.trainNum;
-  qMsg.stoppingDistance = isStationary ? 1 : getStoppingDistance(&me->driver);
+  qMsg.trainNum = me->trainNum;
+  qMsg.stoppingDistance = isStationary ? 1 : getStoppingDistance(me);
   qMsg.lastSensor = sensors[0];
 
   //TrainDebug(me, "Reserving track");
@@ -89,9 +89,9 @@ static int makeReservation(MultiTrainDriver* me) {
 
   // reserveFailedlandmark is not really being used right now
   int len = Send(
-      me->driver.trackManager,
+      me->trackManager,
       (char*)&qMsg, sizeof(ReleaseOldAndReserveNewTrackMsg),
-      (char*)&(me->driver.reserveFailedLandmark), sizeof(TrackLandmark));
+      (char*)&(me->reserveFailedLandmark), sizeof(TrackLandmark));
   if (len > 0) {
     return RESERVE_FAIL;
   } else {
@@ -105,55 +105,54 @@ static int makeReservation(MultiTrainDriver* me) {
 static void initDriver(MultiTrainDriver* me) {
 
   char uiName[] = UI_TASK_NAME;
-  me->driver.ui = WhoIs(uiName);
-  me->driver.CC = 0;
-  me->driver.speedAfterReverse = -1;
-  me->driver.rerouteCountdown = -1;
-  me->driver.nextSetSwitchNode = -1;
-  me->driver.reserveFailedLandmark.type = LANDMARK_BAD;
+  me->ui = WhoIs(uiName);
+  me->CC = 0;
+  me->speedAfterReverse = -1;
+  me->rerouteCountdown = -1;
+  me->nextSetSwitchNode = -1;
+  me->reserveFailedLandmark.type = LANDMARK_BAD;
 
   char trackName[] = TRACK_NAME;
-  me->driver.trackManager = WhoIs(trackName);
-  me->driver.route.length = 0;
-  me->driver.stopCommited = 0; // haven't enabled speed zero yet.
-  me->driver.useLastSensorNow = 0;
-  me->driver.stopNow = 0;
-  me->driver.currentlyLost = 0;
-  me->driver.testMode = 0;
-  me->driver.stopSensorHit = 0;
-  me->driver.nextSensorIsTerminal = 0;
-  me->driver.lastSensorIsTerminal = 0;
-  me->driver.lastSensorVal = 0; // Note to ui to don't print sensor.
-  me->driver.setSwitchNaggerCount = 0;
+  me->trackManager = WhoIs(trackName);
+  me->route.length = 0;
+  me->stopCommited = 0; // haven't enabled speed zero yet.
+  me->useLastSensorNow = 0;
+  me->stopNow = 0;
+  me->testMode = 0;
+  me->stopSensorHit = 0;
+  me->nextSensorIsTerminal = 0;
+  me->lastSensorIsTerminal = 0;
+  me->lastSensorVal = 0; // Note to ui to don't print sensor.
+  me->setSwitchNaggerCount = 0;
   me->isReversing = 0;
 
   char timename[] = TIMESERVER_NAME;
-  me->driver.timeserver = WhoIs(timename);
+  me->timeserver = WhoIs(timename);
 
   MultiTrainInitMsg init;
-  Receive(&(me->driver.trainController), (char*)&init, sizeof(MultiTrainInitMsg));
-  Reply(me->driver.trainController, (char*)1, 0);
+  Receive(&(me->trainController), (char*)&init, sizeof(MultiTrainInitMsg));
+  Reply(me->trainController, (char*)1, 0);
 
   // Create dumb drivers
   me->infoUpdater = -1;
   me->tailMode = 0;
   me->numTrainInGroup = 1;
   me->trainId[0] = CreateDumbTrain(init.nth, (int)init.trainNum);
-  me->driver.trainNum = init.trainNum;
+  me->trainNum = init.trainNum;
   RegisterMulti(init.trainNum);
 
-  me->driver.speed = 0;
-  me->driver.speedDir = ACCELERATE;
-  me->driver.distanceToNextSensor = 0;
-  me->driver.distanceFromLastSensor = 0;
-  me->driver.lastSensorActualTime = 0;
-  me->driver.lastSensorDistanceError = 0;
+  me->speed = 0;
+  me->speedDir = ACCELERATE;
+  me->distanceToNextSensor = 0;
+  me->distanceFromLastSensor = 0;
+  me->lastSensorActualTime = 0;
+  me->lastSensorDistanceError = 0;
 
-  me->driver.sensorWatcher = Create(3, trainSensor);
+  me->sensorWatcher = Create(3, trainSensor);
   me->courier = Create(3, multiTrainDriverCourier);
-  //me->driver.navigateNagger = Create(2, trainNavigateNagger);
+  //me.navigateNagger = Create(2, trainNavigateNagger);
 
-  me->driver.routeRemaining = -1;
+  me->routeRemaining = -1;
   me->stoppedCount = 0;
 }
 
@@ -206,10 +205,10 @@ void multitrain_driver() {
 
     switch (msg->type) {
       case SET_SPEED: {
-        PrintDebug(me.driver.ui, "Set speed");
+        PrintDebug(me.ui, "Set speed");
         // Head train replied and calculate speed.
         if (!me.tailMode) {
-          PrintDebug(me.driver.ui, "head mode");
+          PrintDebug(me.ui, "head mode");
           Reply(msg->replyTid, (char*)1, 0);
           if (msg->data2 == -1) {
             // make every train stop and wait for there stop response
@@ -228,7 +227,7 @@ void multitrain_driver() {
           }
         } else  {
           //Send(me->trainId[0], (char *)msg, sizeof(DriverMsg), (char*)1, 0);
-          PrintDebug(me.driver.ui, "tail mode");
+          PrintDebug(me.ui, "tail mode");
         }
 
         // TODO(rcao) may only want to send to head train and tail trains coorperate
@@ -237,7 +236,7 @@ void multitrain_driver() {
         break;
       }
       case SENSOR_TRIGGER: {
-        if (me.tailMode && tid == me.driver.sensorWatcher) {
+        if (me.tailMode && tid == me.sensorWatcher) {
           Reply(tid, (char *)NULL, 0);
           break;
         }
@@ -248,7 +247,7 @@ void multitrain_driver() {
               (char*)msg, sizeof(DriverMsg), (char *)&isHandled, sizeof(int));
           Reply(tid, (char *)&isHandled, sizeof(int));
         } else {
-          int isSensorReserved = QueryIsSensorReserved(&me.driver, msg->data2, msg->data3);
+          int isSensorReserved = QueryIsSensorReserved(&me, msg->data2, msg->data3);
           if (isSensorReserved) {
             // sensor is reserved
             for (int i = 0; i < me.numTrainInGroup; i ++) {
@@ -278,7 +277,7 @@ void multitrain_driver() {
         // check train's relative position difference
         for (int i = 1; i < me.numTrainInGroup; i++) {
           int distance = 0;
-          QueryDistance(me.driver.trackManager,
+          QueryDistance(me.trackManager,
               &me.info[i].pos, &me.info[i-1].pos, &distance);
           // Get more accurate distance based on knowledge of train direciton.
           distance -= me.info[i].lenBackOfPickup;
@@ -286,7 +285,7 @@ void multitrain_driver() {
 
           // This is pretty arbitrary now and needs tuning
           if (distance > 300 && me.info[i].trainSpeed < me.info[i-1].trainSpeed + 1 && me.info[i].trainSpeed < 14) {
-            PrintDebug(me.driver.ui, "Speeding up Distance: %d", distance);
+            PrintDebug(me.ui, "Speeding up Distance: %d", distance);
             // too far, back train need to speed up
             dMsg.type = SET_SPEED;
             dMsg.data2 = me.info[i].trainSpeed + 1;
@@ -294,7 +293,7 @@ void multitrain_driver() {
             Send(me.trainId[i], (char*)&dMsg, sizeof(DriverMsg), (char*)1, 0);
           } else if (distance < 300 && distance > 0 && me.info[i].trainSpeed > me.info[i-1].trainSpeed - 1 && me.info[i].trainSpeed > 0) {
             // too close, back train need to slow up
-            PrintDebug(me.driver.ui, "Slowing down Distance %d", distance);
+            PrintDebug(me.ui, "Slowing down Distance %d", distance);
             // too far, back train need to speed up
             dMsg.type = SET_SPEED;
             dMsg.data2 = me.info[i].trainSpeed - 1;
@@ -388,15 +387,15 @@ void multitrain_driver() {
       case SET_ROUTE: {
         Reply(msg->replyTid, (char*)1, 0);
         me.routeMsg = *msg;
-        getRoute(&me.driver, &(me.info[0].pos), msg);
+        getRoute(&me, &(me.info[0].pos), msg);
 
-        PrintDebug(me.driver.ui, "Did not set route yet!!!");
+        PrintDebug(me.ui, "Did not set route yet!!!");
         //setRoute(&me, &msg);
         break;
       }
       case GET_POSITION: {
         if (me.tailMode) {
-          PrintDebug(me.driver.ui, "Get position from a tail train ??");
+          PrintDebug(me.ui, "Get position from a tail train ??");
           break;
         }
         // If don't have any valid info yet, reply empty message
@@ -409,13 +408,13 @@ void multitrain_driver() {
       }
       case FIND_POSITION: {
         if (me.tailMode) {
-          PrintDebug(me.driver.ui, "find position while merge????");
+          PrintDebug(me.ui, "find position while merge????");
           break;
         }
 
-        PrintDebug(me.driver.ui, "Train locking %d", me.driver.trainNum);
+        PrintDebug(me.ui, "Train locking %d", me.trainNum);
         // Only 1 train can lock at the same time.
-        lock(me.driver.timeserver);
+        lock(me.timeserver);
         // begin finding position in a slow speed
         DumbTrainSetSpeed(me.trainId[0], 5);
         Reply(msg->replyTid, (char*)1, 0);
@@ -430,7 +429,7 @@ void multitrain_driver() {
           } else if (msg->type == GET_POSITION) {
             Reply(msg->replyTid, (char*)1, 0);
           } else {
-            PrintDebug(me.driver.ui, "WARNN Drop %d", msg->type);
+            PrintDebug(me.ui, "WARNN Drop %d", msg->type);
           }
         }
         DriverMsg dMsg;
@@ -445,9 +444,9 @@ void multitrain_driver() {
         break;
       }
       case MERGE_HEAD: {
-        PrintDebug(me.driver.ui, "merge head");
+        PrintDebug(me.ui, "merge head");
         if (me.tailMode) {
-          PrintDebug(me.driver.ui, "Cannot be a head when in tail mode??");
+          PrintDebug(me.ui, "Cannot be a head when in tail mode??");
           break;
         }
         // Other train controller's id.
@@ -463,26 +462,26 @@ void multitrain_driver() {
         dMsg.type = UPDATE_PARENT_ABOUT_PREDICTION;
         Send(msg->data2, (char *)&dMsg, sizeof(DriverMsg), (char *)NULL, 0);
 
-        PrintDebug(me.driver.ui, "merge head done");
+        PrintDebug(me.ui, "merge head done");
         break;
       }
       case MERGE_TAIL: {
-        PrintDebug(me.driver.ui, "merge tail begin");
+        PrintDebug(me.ui, "merge tail begin");
         if (me.tailMode) {
-          PrintDebug(me.driver.ui, "Double merge tail??");
+          PrintDebug(me.ui, "Double merge tail??");
           break;
         }
         // Enters courier mode that passes dumb_train msg to 'real' controller
         me.tailMode = 1;
         me.headTid = msg->data2;
-        clearReservation(me.driver.trackManager, me.driver.trainNum);
+        clearReservation(me.trackManager, me.trainNum);
         Reply(msg->replyTid, (char*)1, 0);
-        PrintDebug(me.driver.ui, "merge tail done");
+        PrintDebug(me.ui, "merge tail done");
         break;
       }
       case SEPARATE_TAIL: {
         if (!me.tailMode) {
-          PrintDebug(me.driver.ui, "Not in tail mode..??"); break;
+          PrintDebug(me.ui, "Not in tail mode..??"); break;
         }
         me.tailMode = 0;
         me.headTid = 0;
@@ -492,7 +491,7 @@ void multitrain_driver() {
       }
       case REPORT_INFO: {
         if (!me.tailMode) {
-          PrintDebug(me.driver.ui, "Report info Not in tail mode..??"); break;
+          PrintDebug(me.ui, "Report info Not in tail mode..??"); break;
         }
 
         // ASSUME ONLY 1 train when in tail mode.
@@ -504,7 +503,7 @@ void multitrain_driver() {
       }
       case UPDATE_PARENT_ABOUT_PREDICTION: {
         if (!me.tailMode) {
-          PrintDebug(me.driver.ui, "Update Parent Not in tail mode..??"); break;
+          PrintDebug(me.ui, "Update Parent Not in tail mode..??"); break;
         }
         // ASSUME ONLY 1 train when in tail mode.
         Send(me.trainId[0], (char*)msg, sizeof(DriverMsg),
@@ -522,7 +521,7 @@ void multitrain_driver() {
       }
       case REVERSE_SPEED : {
         if (!me.tailMode) {
-          PrintDebug(me.driver.ui, "Reverse Speed Not in tail mode..??"); break;
+          PrintDebug(me.ui, "Reverse Speed Not in tail mode..??"); break;
         }
 
         for (int i = 0; i < me.numTrainInGroup; i++) {
@@ -531,7 +530,7 @@ void multitrain_driver() {
         break;
       }
       default: {
-        PrintDebug(me.driver.ui, "Not Handled %d", msg->type);
+        PrintDebug(me.ui, "Not Handled %d", msg->type);
       }
     } // switch
   } // for
diff --git a/kernel/train/MultiTrainDriver.h b/kernel/train/MultiTrainDriver.h
index 7e370a1..6bce908 100644
--- a/kernel/train/MultiTrainDriver.h
+++ b/kernel/train/MultiTrainDriver.h
@@ -18,12 +18,39 @@
 #define GET_POSITION 107
 
 typedef struct MultiTrainDriver {
+  int trainNum;
+  int speed;      // 0 - 14
+  int speedDir;
+  int timeserver;
+  int trainController;
+  int sensorWatcher;
+  int lastSensorDistanceError;
+  float distanceFromLastSensor;
+  float distanceToNextSensor;
   // the single train driver side of multi-train driver,
   // most parameters relates to the head train
-  Driver driver;
+  //Driver driver;
   int infoUpdater;
+  int stopNode;
+  int previousStopNode;
+  int distanceFromLastSensorAtPreviousStopNode;
+  int stopCommited;
+  int stopSensorHit;
+  int stopSensorBox;
+  int stopSensorVal;
+  int distancePassStopSensorToStop;
+  int useLastSensorNow;
+  int stopNow;
+  int positionFinding;
+  int rerouteCountdown;
+  int nextSetSwitchNode;
+  int setSwitchNaggerCount;
+  int testMode;
+  Route route;
 
   // The multi-train driver side
+  int ui;
+  int trackManager;
   int courier;
   int numTrainInGroup;
   int isReversing;
@@ -31,6 +58,21 @@ typedef struct MultiTrainDriver {
   int trainId[MAX_TRAIN_IN_GROUP];
   DumbDriverInfo info[MAX_TRAIN_IN_GROUP];
   int stoppedCount;
+  TrainUiMsg uiMsg;
+
+
+  // Actual Stuf
+  char lastSensorIsTerminal;
+  char lastSensorUnexpected;
+  char lastSensorBox;
+  char lastSensorVal;
+  int lastSensorActualTime;
+  int lastSensorPredictedTime;
+
+
+  // prediction stuff
+  TrackSensorPrediction predictions[20];
+  int numPredictions;
 
   // An array of sensors to reserve for each train in group
   TrackLandmark sensorToReserve[MAX_TRAIN_IN_GROUP][10];
@@ -39,6 +81,19 @@ typedef struct MultiTrainDriver {
   int tailMode;
   int headTid;
 
+  int v[15][2];
+  int d[15][2][2];
+  int a[15]; // TODO should be 15 * 15 later
+  int CC;
+  int routeRemaining;
+  char nextSensorIsTerminal;
+  char nextSensorBox;
+  TrackLandmark reserveFailedLandmark;
+  char nextSensorVal;
+  int nextSensorPredictedTime;
+
+
+
   DriverMsg routeMsg;
 } MultiTrainDriver;
 
